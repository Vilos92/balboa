datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

// Auth resources.

model Account {
  id                 String  @id @default(cuid())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Plan          Plan[]
  users       UserOnPlan[]  

  @@map("rocky_user")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

// Base resources.

model Plan {
  hostUserId  Int           @map("host_user_id")
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @map("created_at") @default(now())
  title       String
  color       String 
  start       DateTime
  end         DateTime
  location    String
  description String
  HostUser    User          @relation(fields: [hostUserId], references: [id])
  users       UserOnPlan[]  

  @@map("plan")
}

model UserOnPlan {
  createdAt  DateTime  @map("created_at") @default(now())
  plan       Plan      @relation(fields: [planId], references: [id])
  planId     Int       @map("plan_id")
  user       User      @relation(fields: [userId], references: [id])
  userId     Int       @map("user_id")

  @@id([planId, userId])
  @@map("user_on_plan")
}